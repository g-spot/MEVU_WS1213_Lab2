// automatically generated by Xtext
grammar at.ac.tuwien.big.me12.GSMLDsl with org.eclipse.xtext.common.Terminals

import "http://gradingsystem.me12.big.tuwien.ac.at/1.0" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

GradingSystem:
	courses += Course*
;

Course:
	'course' name = ID '{'
		gradings += Grading* '}'
;

Grading:
	'semester' semester = EString '{'
		gradingScheme = GradingScheme
		tasks += Task
	'}'
;

 // aus irgendeinem Grund (???) muss man Grade in eckige Klammern setzen
 // damit die minRequirementNotFulfilledGrade angenommen wird
GradingScheme:
	'grading scheme' '(' minRequirementNotFulfilledGrade=[Grade] ')' '{'
		grades += Grade*
	'}'
;

Grade:
	name = EString ':' requiredPoints = EInt ';'
;

Task:
	ConcreteTask | TaskGroup
;

ConcreteTask:
	name = EString '(' maxPoints = EInt ')' ':' minRequirement = MinRequirement
;

TaskGroup:
	name = EString '{'
		contains += Task
		('@all' ':' minRequirement = MinRequirement)
	'}'
;

MinRequirement:
	'min' value = EInt type = MinRequirementsType ';'
;

enum MinRequirementsType:
	Percentage = '%' | Absolute = 'point(s)'
;

EString returns ecore::EString:
	STRING | ID;

EInt returns ecore::EInt:
	'-'? INT;

/*GradingSystem returns GradingSystem:
	{GradingSystem}
	'GradingSystem'
	'{'
		('courses' '{' courses+=Course ( "," courses+=Course)* '}' )?
	'}';



Task returns Task:
	ConcreteTask | TaskGroup;




Course returns Course:
	{Course}
	'Course'
	name=EString
	'{'
		('gradings' '{' gradings+=Grading ( "," gradings+=Grading)* '}' )?
	'}';

EString returns ecore::EString:
	STRING | ID;

Grading returns Grading:
	'Grading'
	'{'
		('semester' semester=EString)?
		'tasks' '{' tasks+=Task ( "," tasks+=Task)* '}' 
		'gradingScheme' gradingScheme=GradingScheme
	'}';

GradingScheme returns GradingScheme:
	'GradingScheme'
	'{'
		'minRequirementNotFulfilledGrade' minRequirementNotFulfilledGrade=[Grade|EString]
		'grades' '{' grades+=Grade ( "," grades+=Grade)* '}' 
	'}';

MinRequirement returns MinRequirement:
	{MinRequirement}
	'MinRequirement'
	'{'
		('value' value=EInt)?
		('type' type=MinRequirementsType)?
	'}';

ConcreteTask returns ConcreteTask:
	{ConcreteTask}
	'ConcreteTask'
	name=EString
	'{'
		('maxPoints' maxPoints=EInt)?
		('minRequirement' minRequirement=MinRequirement)?
	'}';

TaskGroup returns TaskGroup:
	'TaskGroup'
	name=EString
	'{'
		('minRequirement' minRequirement=MinRequirement)?
		'contains' '{' contains+=Task ( "," contains+=Task)* '}' 
	'}';

EInt returns ecore::EInt:
	'-'? INT;

MinRequirementsType returns MinRequirementsType:
	'MinRequirementsType' // TODO: implement this rule and an appropriate IValueConverter
;

Grade returns Grade:
	{Grade}
	'Grade'
	name=EString
	'{'
		('requiredPoints' requiredPoints=EInt)?
	'}';
*/